# this is not a script file, and it will not be executed
# here are some notes
# when a command is executed, the an non erroneous result printed on the screen is known as standard output
# whilst an erroneous result is known as standard error
# both standard output and standard error can be printed as a result of a single command
# /dev/null is like a "black hole" that discards any output directed to that path
# for all these below commands, which redirect output/error to a file, ">" overwrites what is in that current file...
# ...where as ">>" would append to that current file
# i knew this already but this is the first time writing about it. note to self
# take these commands and paste them to the shell to experiment

find /etc -type f 1> /dev/null # this command takes all the printed results of standard output and redirects them to the designated file path
find /etc -type f > /dev/null # this command does the exact the same thing as the above command. the above is more explicit syntax with the "1"
find /etc -type f 2> /dev/null # this command takes all the printed results of standard error and redirects them to the designated file path
find /etc -type f &> /dev/null # this command takes all the printed results (BOTH standard output and standard error) and redirects them to designated file path

# same commands as the above ones, just different destination file path
find /etc -type f 1> ./results.txt
find /etc -type f > ./results.txt
find /etc -type f 2> ./error.txt
find /etc -type f &> ./all_results.txt

find /etc -type f 1>results.txt 2>errors.txt # this command will send output results to results.txt and error results to errors.txt. i would be using this a lot. standard output goes one place, standard output goes another place

# 1 = standard output
# 2 = standard error
# the > without a number is the same as 1>
# meaning, "find /etc -type f 1> /dev/null" is the same as "find /etc -type f > /dev/null"
# the 1 is implied
